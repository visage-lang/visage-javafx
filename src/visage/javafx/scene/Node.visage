/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene;

import java.util.Set;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Orientation;
import javafx.scene.CacheHint;
import javafx.scene.Cursor;
import javafx.scene.DepthTest;
import javafx.scene.effect.BlendMode;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.ScrollEvent;

import visage.javafx.scene.effect.Effect;
import visage.javafx.scene.transform.Transform;

/**
 * @author Stephen Chin <steveonjava@gmail.com>
 * @author Alain Béarez <A@cua.li>
 * @author William Antônio <william.a.siqueira@gmail.com>
 */
public class Node {
    public-read protected var wrappedNode:javafx.scene.Node;
    public var layoutX:Double on replace {
        if (isInitialized(this) or layoutX != 0) {
            wrappedNode.setLayoutX(layoutX);
        }
    }
    public var layoutY:Double on replace {
        if (isInitialized(this) or layoutY != 0) {
            wrappedNode.setLayoutY(layoutY);
        }
    }
    
/**
     * <p>Property for overriding the region's computed minimum width. This should only be set if the region's internally computed minimum width doesn't meet the application's layout needs.</p>
     * <p>Defaults to the <code>USE_COMPUTED_SIZE</code> flag, which means that <code>minWidth(forHeight)</code> will return the region's internally computed minimum width.</p>
     * <p>Setting this value to the <code>USE_PREF_SIZE</code> flag will cause <code>minWidth(forHeight)</code> to return the region's preferred width, enabling applications to easily restrict the resizability of the region.</p>
     */
    public var minWidth :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != minWidth)) or (0 != minWidth)) {
            wrappedNode.minWidth(minWidth)
        }
    }
    /**
     * <p>Property for overriding the region's computed minimum height. This should only be set if the region's internally computed minimum height doesn't meet the application's layout needs.</p>
     * <p>Defaults to the <code>USE_COMPUTED_SIZE</code> flag, which means that <code>minHeight(forWidth)</code> will return the region's internally computed minimum height.</p>
     * <p>Setting this value to the <code>USE_PREF_SIZE</code> flag will cause <code>minHeight(forWidth)</code> to return the region's preferred height, enabling applications to easily restrict the resizability of the region.</p>
     */
    public var minHeight :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != minHeight)) or (0 != minHeight)) {
            wrappedNode.minHeight(minHeight)
        }
    }
    /**
     * <p>Property for overriding the region's computed preferred width. This should only be set if the region's internally computed preferred width doesn't meet the application's layout needs.</p>
     * <p>Defaults to the <code>USE_COMPUTED_SIZE</code> flag, which means that <code>prefWidth(forHeight)</code> will return the region's internally computed preferred width.</p>
     */
    public var prefWidth :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != prefWidth)) or (0 != prefWidth)) {
            wrappedNode.prefWidth(prefWidth)
        }
    }
    /**
     * <p>Property for overriding the region's computed preferred height. This should only be set if the region's internally computed preferred height doesn't meet the application's layout needs.</p>
     * <p>Defaults to the <code>USE_COMPUTED_SIZE</code> flag, which means that <code>prefHeight(forWidth)</code> will return the region's internally computed preferred height.</p>
     */
    public var prefHeight :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != prefHeight)) or (0 != prefHeight)) {
            wrappedNode.prefHeight(prefHeight)
        }
    }
    /**
     * <p>Property for overriding the region's computed maximum width. This should only be set if the region's internally computed maximum width doesn't meet the application's layout needs.</p>
     * <p>Defaults to the <code>USE_COMPUTED_SIZE</code> flag, which means that <code>maxWidth(forHeight)</code> will return the region's internally computed maximum width.</p>
     * <p>Setting this value to the <code>USE_PREF_SIZE</code> flag will cause <code>maxWidth(forHeight)</code> to return the region's preferred width, enabling applications to easily restrict the resizability of the region.</p>
     */
    public var maxWidth :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != maxWidth)) or (0 != maxWidth)) {
            wrappedNode.maxWidth(maxWidth)
        }
    }
    /**
     * <p>Property for overriding the region's computed maximum height. This should only be set if the region's internally computed maximum height doesn't meet the application's layout needs.</p>
     * <p>Defaults to the <code>USE_COMPUTED_SIZE</code> flag, which means that <code>maxHeight(forWidth)</code> will return the region's internally computed maximum height.</p>
     * <p>Setting this value to the <code>USE_PREF_SIZE</code> flag will cause <code>maxHeight(forWidth)</code> to return the region's preferred height, enabling applications to easily restrict the resizability of the region.</p>
     */
    public var maxHeight :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != maxHeight)) or (0 != maxHeight)) {
            wrappedNode.maxHeight(maxHeight)
        }
    } 
    /**
     * <p>Defines the angle of rotation about the Node's center, measured in degrees. This is used to rotate the Node.</p>
     * <p>This rotation factor is not included in layoutBounds by default, which makes it ideal for rotating the entire node after all effects and transforms have been taken into account.</p>
     * <p>The pivot point about which the rotation occurs is the center of the untransformed layoutBounds.</p>
     * <p>Note that because the pivot point is computed as the center of this Node's layout bounds, any change to the layout bounds will cause the pivot point to change, which can move the object. For a leaf node, any change to the geometry will cause the layout bounds to change. For a group node, any change to any of its children, including a change in a child's geometry, clip, effect, position, orientation, or scale, will cause the group's layout bounds to change. If this movement of the pivot point is not desired, applications should instead use the Node's #transforms[] observableArrayList, and add a Rotate transform, which has a user-specifiable pivot point.</p>
     */
    public var rotate :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != rotate)) or (0 != rotate)) {
            wrappedNode.setRotate(rotate)
        }
    }
    /**
     * Indicates whether this node has a flexible range of acceptable sizes and allows its parent to resize it during layout. Nodes that should be treated as rigid will return false, in which case they may be moved but not resized during layout. Returns false by default.
     * @return whether or not this node can be resized by its parent during layout.
     */
    public function isResizable() :Boolean {
        wrappedNode.isResizable()
    }
    /**
     * If the node is resizable, will set its layout bounds to the specified width and height. If the node is not resizable, this method is a no-op. Resizable nodes are designed to be resized by their parent during layout and thus applications should not invoke this method directly.
     * @param width the target layout bounds width.
     * @param height the target layout bounds height.
     */
    public function resize(width :Double, height :Double) :Void {
        wrappedNode.resize(width, height)
    }
    /**
     * If the node is resizable and it's preferred height depends on its width, returns <code>HORIZONTAL</code>, else if its preferred width depends on its height, returns <code>VERTICAL</code>, or if there is no such dependency, returns <code>null</code>. Resizable subclasses should override this method to return an appropriate value.
     * @return orientation of width/height dependency or <code>null</code> if there is none.
     */
    public function getContentBias():Orientation {
        wrappedNode.getContentBias()
    }
    
    /**
     * The BlendMode used to blend this individual node into the scene behind it.
     */
    public var blendMode:BlendMode on replace {        
        if (isInitialized(this) or BlendMode.SRC_OVER != blendMode) {
            wrappedNode.setBlendMode(blendMode);
        }
    }
    /**
     * Additional hint for controlling bitmap caching.
     */
    public var cacheHint :CacheHint  = CacheHint.DEFAULT  on replace {
        if (isInitialized(this) or CacheHint.DEFAULT  != cacheHint) {
            wrappedNode.setCacheHint(cacheHint);
        }
    }    
    
    /**
     *   A performance hint to the system to indicate that this Node should be cached as a bitmap.
     */
    public var cache :Boolean on replace{
        if (isInitialized(this) or cache) {
            wrappedNode.setCache(cache);
        }
    }        
    
    /**
     *  Specifies a Node to use to define the the clipping shape for this Node.
     */
    public var clip :javafx.scene.Node on replace oldValue {
        if (isInitialized(this) or null != clip) {
            wrappedNode.setClip(clip);
        }
    }        
    
    /**
     *  Defines the mouse cursor for this Node and subnodes.
     */
    public var cursor:Cursor  = Cursor.DEFAULT on replace{
        if (isInitialized(this) or Cursor.DEFAULT != cursor) {
            wrappedNode.setCursor(cursor);
        }
    }        
        
    /**
     *  Indicates whether depth testing is used when rendering this node.
     */
    public var depthTest:DepthTest = DepthTest.DISABLE on replace {
        if (isInitialized(this) or DepthTest.DISABLE != depthTest) {
            wrappedNode.setDepthTest(depthTest);
        }
    }        
    /**
     *  Sets the individual disabled state of this Node.
     */
    public var disable :Boolean on replace {
        if (isInitialized(this) or disable) {
            wrappedNode.setDisable(disable);
        }
    }         

    /**
     *  Specifies an effect to apply to this Node.
     */
    public var effect :Effect on replace {
        if (isInitialized(this) or null != effect) {
            wrappedNode.setEffect(effect.wrappedEffect);
        }
    }        

    /**
     *  Indicates whether this Node currently has the input focus.
     * @return 
     */
    public function isFocused():Boolean{
        return wrappedNode.isFocused();
    }   
    
    /**
     *  Specifies whether this Node should be a part of focus traversal cycle.
     */
    public var focusTraversable:Boolean on replace {
        if (isInitialized(this) or focusTraversable) {
            wrappedNode.setFocusTraversable (focusTraversable );
        }
    }    

    public-read var hover:Boolean;
    
    /**
     *  Whether or not this Node is being hovered over
     * @return 
     */
    public function isHover():Boolean{
        return wrappedNode.isHover();
    }
    /**
     *  The id of this node
     */
    public var id:String on replace  {
        if (isInitialized(this) or null != id) {
            wrappedNode.setId(id);
        }
    }

    /**
     *  Defines whether or not this node's layout will be managed by it's parent.
     */
    public var managed:Boolean = true on replace {
        if (isInitialized(this) or not managed ) {
            wrappedNode.setManaged(managed);
        }
    }    
    
    /**
     *   If true, this node (together with all its children) is completely transparent to mouse events.
    */    
    public var mouseTransparent:Boolean on replace {
        if (isInitialized(this) or mouseTransparent ) {
            wrappedNode.setMouseTransparent(mouseTransparent);
        }
    }
        

    /**
     *  Specifies how opaque (that is, solid) the Node appears.
    **/
     public var opacity:Double = 1.0 on replace {
        if (isInitialized(this) or opacity != 0) {
            wrappedNode.setOpacity(opacity);
        }
    }   
    
    /**
     * Defines how the picking computation is done for this node when triggered by a MouseEvent or a contains function call.
    */
    public var pickOnBounds:Boolean on replace {
        if (isInitialized(this) or pickOnBounds ) {
            wrappedNode.setPickOnBounds(pickOnBounds );
        }
    }        
    /**
     * Whether or not the Node is pressed.
     **/
    public function isPressed():Boolean{
        return wrappedNode.isPressed();        
    }
    /**
     * Defines the factor by which coordinates are scaled about the center of the object along the X axis of this Node.
     **/
    public var scaleX:Double on replace {
        if (isInitialized(this) or scaleX != 0) {
            wrappedNode.setScaleX(scaleX);
        }
    } 

    /**
     * Defines the factor by which coordinates are scaled about the center of the object along the Y axis of this Node.
     **/
    public var scaleY:Double on replace {
        if (isInitialized(this) or scaleY != 0) {
            wrappedNode.setScaleY(scaleY);
        }
    } 

    /**
     * Defines the factor by which coordinates are scaled about the center of the object along the X axis of this Node.
     **/
    public var scaleZ:Double on replace {
        if (isInitialized(this) or scaleZ != 0) {
            wrappedNode.setScaleZ(scaleZ);
        }
    }

    /**
     * <p>Defines the <code>x</code> coordinate of the translation that is added to this <code>Node</code>'s transform.</p>
     * <p>The node's final translation will be computed as <code>layoutX + translateX</code>, where <code>layoutX</code> establishes the node's stable position and <code>translateX</code> optionally makes dynamic adjustments to that position.</p>
     * <p>This variable can be used to alter the location of a node without disturbing its <code>layoutBounds</code>, which makes it useful for animating a node's location.</p>
     */
    public var translateX :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != translateX)) or (0 != translateX)) {
            wrappedNode.setTranslateX(translateX);
        }
    }

    /**
     * <p>Defines the <code>y</code> coordinate of the translation that is added to this <code>Node</code>'s transform.</p>
     * <p>The node's final translation will be computed as <code>layoutY + translateY</code>, where <code>layoutY</code> establishes the node's stable position and <code>translateY</code> optionally makes dynamic adjustments to that position.</p>
     * <p>This variable can be used to alter the location of a node without disturbing its <code>layoutBounds</code>, which makes it useful for animating a node's location.</p>
     */
    public var translateY :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != translateY)) or (0 != translateY)) {
            wrappedNode.setTranslateY(translateY);
        }
    }

    /**
     * <p>Defines the Z coordinate of the translation that is added to the transformed coordinates of this <code>Node</code>. This value will be added to any translation defined by the transforms <code>ObservableList</code> and <code>layoutZ</code>.</p>
     * <p>This variable can be used to alter the location of a node without disturbing its <code>layoutBounds</code>, which makes it useful for animating a node's location.</p>
     * <p>Note that this is a conditional feature. See <code>ConditionalFeature.SCENE3D</code> for more information.</p>
     */
    public var translateZ :Double on replace oldValue {
        if ((isInitialized(this) and (oldValue != translateZ)) or (0 != translateZ)) {
            wrappedNode.setTranslateZ(translateZ);
        }
    }
    
    /**
     * A string representation of the CSS style associated with this specific Node.
     **/
    public var style:String on replace{
        if (isInitialized(this) or null != style) {
            wrappedNode.setStyle(style);
        }
    }
    public default var transforms :Transform[] on replace oldValue {
        if ((isInitialized(this) and (oldValue != transforms)) or ([] != transforms)) {
            wrappedNode.getTransforms().setAll(for (transform in transforms) transform.wrappedTransform);
        }
    }
    /**
     *   Specifies whether this Node and any subnodes should be rendered as part of the scene graph.
    **/
    public var visible:Boolean  = true on replace{
        if (isInitialized(this) or not visible) {
            wrappedNode.setVisible(visible);
        }
    }       
    
    /**
     * Defines a function to be called when a mouse button has been clicked (pressed and released) on this <code>Node</code>.
     */        
    public var onMouseClicked :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseClicked == null) { 
                wrappedNode.setOnMouseClicked(null) 
            } else if (wrappedNode.getOnMouseClicked() == null) { 
                wrappedNode.setOnMouseClicked(EventHandler { 
                    override function handle(e:Event):Void { 
                        onMouseClicked(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }

   /**
     * Defines a function to be called when a mouse button is pressed on this <code>Node</code> and then dragged.
     */        
    public var onMouseDragged :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseDragged == null) { 
                wrappedNode.setOnMouseDragged(null) 
            } else if (wrappedNode.getOnMouseDragged() == null) { 
                wrappedNode.setOnMouseDragged(EventHandler { 
                    override function handle(e:Event):Void { 
                        onMouseDragged(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }    
    /**
     * Defines a function to be called when the mouse enters this <code>Node</code>.
     */        
    public var onMouseEntered :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseEntered == null) { 
                wrappedNode.setOnMouseEntered(null) 
            } else if (wrappedNode.getOnMouseEntered() == null) { 
                wrappedNode.setOnMouseEntered(EventHandler { 
                    override function handle(e:Event):Void { 
                        onMouseEntered(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }   
   /**
     * Defines a function to be called when the mouse exits this <code>Node</code>.
     */        
    public var onMouseExited :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseExited == null) { 
                wrappedNode.setOnMouseExited(null) 
            } else if (wrappedNode.getOnMouseExited() == null) { 
                wrappedNode.setOnMouseExited(EventHandler { 
                    override function handle(e:Event):Void { 
                        onMouseExited(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }
   /**
     * Defines a function to be called when mouse cursor moves within this <code>Node</code> but no buttons have been pushed.
     */        
    public var onMouseMoved :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseMoved == null) { 
                wrappedNode.setOnMouseMoved(null) 
            } else if (wrappedNode.getOnMouseMoved() == null) { 
                wrappedNode.setOnMouseMoved(EventHandler { 
                    override function handle(e:Event):Void { 
                        onMouseMoved(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }
   /**
     * Defines a function to be called when a mouse button has been pressed on this <code>Node</code>.
     */        
    public var onMousePressed :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMousePressed == null) { 
                wrappedNode.setOnMousePressed(null) 
            } else if (wrappedNode.getOnMousePressed() == null) { 
                wrappedNode.setOnMousePressed(EventHandler { 
                    override function handle(e:Event):Void { 
                        onMousePressed(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }
   /**
     * Defines a function to be called when a mouse button has been released on this <code>Node</code>.
     */        
    public var onMouseReleased :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseReleased == null) { 
                wrappedNode.setOnMouseReleased(null) 
            } else if (wrappedNode.getOnMouseReleased() == null) { 
                wrappedNode.setOnMouseReleased(EventHandler { 
                    override function handle(e:Event):Void { 
                        onMouseReleased(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }    
    /**
     * Defines a function to be called when drag gesture has been detected. This is the right place to start drag and drop operation.
     */        
    public var onDragDetected :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onDragDetected == null) { 
                wrappedNode.setOnDragDetected(null) 
            } else if (wrappedNode.getOnDragDetected() == null) { 
                wrappedNode.setOnDragDetected(EventHandler { 
                    override function handle(e:Event):Void { 
                        onDragDetected(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }   
    
    /**
     * Defines a function to be called when this Node or its child Node has input focus and a key has been pressed. The function is called only if the event hasn't been already consumed during its capturing or bubbling phase.
     */        
    public var onKeyPressed :function(:KeyEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onKeyPressed == null) { 
                wrappedNode.setOnKeyPressed(null) 
            } else if (wrappedNode.getOnKeyPressed() == null) { 
                wrappedNode.setOnKeyPressed(EventHandler { 
                    override function handle(e:Event):Void { 
                        onKeyPressed(e as KeyEvent) 
                    }
                }) 
            } 
        // } 
    } 
    /**
     * Defines a function to be called when this Node or its child Node has input focus and a key has been released. The function is called only if the event hasn't been already consumed during its capturing or bubbling phase.
     */        
    public var onKeyReleased :function(:KeyEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onKeyReleased == null) { 
                wrappedNode.setOnKeyReleased(null) 
            } else if (wrappedNode.getOnKeyReleased() == null) { 
                wrappedNode.setOnKeyReleased(EventHandler { 
                    override function handle(e:Event):Void { 
                        onKeyReleased(e as KeyEvent) 
                    }
                }) 
            } 
        // } 
    }
    /**
     * Defines a function to be called when this Node or its child Node has input focus and a key has been typed. The function is called only if the event hasn't been already consumed during its capturing or bubbling phase.
     */        
    public var onKeyTyped :function(:KeyEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onKeyTyped == null) { 
                wrappedNode.setOnKeyTyped(null) 
            } else if (wrappedNode.getOnKeyTyped() == null) { 
                wrappedNode.setOnKeyTyped(EventHandler { 
                    override function handle(e:Event):Void { 
                        onKeyTyped(e as KeyEvent) 
                    }
                }) 
            } 
        // } 
    }
    /**
     * Defines a function to be called when user performs a scrolling action.
     */        
    public var onScroll :function(:ScrollEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onScroll == null) { 
                wrappedNode.setOnScroll(null) 
            } else if (wrappedNode.getOnScroll() == null) { 
                wrappedNode.setOnScroll(EventHandler { 
                    override function handle(event :Event) :Void { 
                        onScroll(event as ScrollEvent) 
                    }
                }) 
            } 
        // } 
    }
    
    /**
     * Finds this Node, or the first sub-node, based on the given CSS selector.
    **/
    public function lookup(selector :String) :Node{
        return Node{
            wrappedNode: wrappedNode.lookup(selector);
        };
    }
    /**
     * Finds all Nodes, including this one and any children, which match the given CSS selector.    
    **/
    public function lookupAll(selector :String) :Set{
        return wrappedNode.lookupAll(selector);
    }    
    /** Moves this <code>Node</code> to the front of its sibling nodes in terms of z-order. This is accomplished by moving this <code>Node</code> to the last position in its parent's content <code>ObservableList</code>. This function has no effect if this <code>Node</code> is not part of a group. */
    public function toFront() :Void {
        wrappedNode.toFront()
    }
    //TODO: eventDispatcher, inputMethodRequests, layoutBounds, finish drags, parent
    // rotationAxis, scene
     
    init {
        wrappedNode.hoverProperty().addListener(
            ChangeListener {
                override function changed (observable :ObservableValue, oldValue, newValue) :Void {
                    hover = newValue as Boolean
                }
            }
        );
    }
}
