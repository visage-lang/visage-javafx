/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.control;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;

/** 
 * 
 * @author William Antonio <william.a.siqueira@gmail.com>
 */
public class ComboBox extends ComboBoxBase {
    override def wrappedNode = javafx.scene.control.ComboBox {}
    public-read def wrappedComboBox = bind wrappedComboBoxBase as javafx.scene.control.ComboBox;
    
    init{
         //JavaFX creates a SingleSelectionModel implementation, so we take it and register listeners to get the changes
	selectionModel = InternalSingleSelectionModel{wrappedSelectionModel: wrappedComboBox.getSelectionModel()}
    }
    
    public default var items:Object[] on replace {
        if (isInitialized(this) or items != []) {
	    wrappedComboBox.getItems().removeAll();
	    for (item in items){
	        wrappedComboBox.getItems().add(item);
	    }
	    //wrappedComboBox.getItems().setAll(for (item in items) item);
        }
    }
    
    public var selectionModel:SingleSelectionModel on replace{
         if (isInitialized(this) or selectionModel != null) {
	    wrappedComboBox.setSelectionModel(selectionModel.wrappedSingleSelectionModel);
	 }
    }
}
//Creating an internal class to wrap the SingleSeletionModel.
class InternalSingleSelectionModel extends SingleSelectionModel{}