/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.control;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;

/** 
 * SelectionModel is an abstract class used by UI controls to provide a consistent API for maintaining selection.
 * @author William Antonio <william.a.siqueira@gmail.com>
 */
public abstract class SelectionModel {    
    
    //Letting user init this as we don't have known concrete class...
    public-init protected var wrappedSelectionModel:javafx.scene.control.SelectionModel;

    postinit{
         registerListeners();  
    }
    
   /**
    * Register listeners necessary to reflect the changes from JavaFX side in our selectionModel
   **/   
   protected function registerListeners():Void{
	wrappedSelectionModel.selectedItemProperty().addListener(
        ChangeListener{
            override function changed( observable:ObservableValue, oldValue:Object , newValue:Object ):Void{
                selectedItem = newValue;
            }
        });     
   }   
    /**
      * Refers to the selected index property, which is used to indicate the currently selected index value in the selection model.
    **/
    public var selectedIndex:Integer on replace oldvalue{
        if(isInitialized(this) or selectedIndex != 0){
            wrappedSelectionModel.select(selectedIndex);
        }
    }

    /**
      * Refers to the selected item property, which is used to indicate the currently selected item in the selection model.
    **/
    public var selectedItem:Object on replace oldvalue{
        if(isInitialized(this) or selectedItem != null){
            wrappedSelectionModel.select(selectedItem);
        }
    }
    /**
    * This property is available to test whether there are any selected indices/items.
    **/
    public var empty:Boolean = bind  wrappedSelectionModel.isEmpty();

    /**
      * A method that clears any selection prior to setting the selection to the given index.
    **/
   public function clearAndSelect(index:Integer):Void{
        wrappedSelectionModel.clearAndSelect(index);
   }

    /**
      * Clears the selection model of all selected indices.
    **/
   public function clearSelection():Void{
        wrappedSelectionModel.clearSelection();
   }
 
    /**
      * Clears the selection of the given index, if it is currently selected.
    **/
   public function clearSelection(index:Integer):Void{
        wrappedSelectionModel.clearSelection(index);
   }

    /**
      * Convenience method to inform if the given index is currently selected in this SelectionModel.
    **/
   public function isSelected(index:Integer):Boolean{
        wrappedSelectionModel.isSelected(index);
   }
    /**
      * This will select the given index in the selection model, assuming the index is within the valid range
    **/
   public function select(index:Integer):Void{
        wrappedSelectionModel.select(index);
   }
 
    /**
      * This method will attempt to select the index that contains the given object.
    **/
   public function select(obj:Object):Void{
        wrappedSelectionModel.select(obj);
   }
 
    /**
      * This method will attempt to select the first index in the control.
    **/
   public function selectFirst():Void{
        wrappedSelectionModel.selectFirst();
   }
 
    /**
      * This method will attempt to select the last index in the control.
    **/
   public function selectLast():Void{
        wrappedSelectionModel.selectLast();
   }
 
    /**
      * This method will attempt to select the index directly after the current focused index.
    **/
   public function selectNext():Void{
        wrappedSelectionModel.selectNext();
   }
    
    /**
      * This method will attempt to select the index directly before the current focused index.
    **/
   public function selectPrevious():Void{
        wrappedSelectionModel.selectPrevious();
   }

}