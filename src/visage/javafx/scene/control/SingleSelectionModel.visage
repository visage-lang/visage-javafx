/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.control;

import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;

/** 
 * SelectionModel is an abstract class used by UI controls to provide a consistent API for maintaining selection.
 * @author William Antonio <william.a.siqueira@gmail.com>
 */
public abstract class SingleSelectionModel extends SelectionModel{    

     public-read protected var wrappedSingleSelectionModel = bind wrappedSelectionModel as javafx.scene.control.SingleSelectionModel;
 /**
      * In the SingleSelectionModel, this method is functionally equivalent to calling select(index), as only one selection is allowed at a time.
    **/
   override public function clearAndSelect(index:Integer):Void{
        wrappedSingleSelectionModel.clearAndSelect(index);
   }    
 
   /**
      * Clears the selection model of all selected indices.
    **/
   override public function clearSelection():Void{
        wrappedSingleSelectionModel.clearSelection();
   }
 
    /**
      * Clears the selection of the given index, if it is currently selected.
    **/
   override public function clearSelection(index:Integer):Void{
        wrappedSingleSelectionModel.isSelected(index);
   }
   
    /**
    * This property is available to test whether there are any selected indices/items.
    **/   
     override public-read var empty:Boolean = bind  wrappedSingleSelectionModel.isEmpty();
    
    /**
      * This method will return true if the given index is the currently selected index in this SingleSelectionModel..
    **/
   override public function isSelected(index:Integer):Boolean{
        wrappedSingleSelectionModel.isSelected(index);
   }
    /**
      * Selects the given index.
    **/
   override public function select(index:Integer):Void{
        wrappedSingleSelectionModel.select(index);
   }  
   /**
      * Selects the index for the first instance of given object in the underlying data model.
    **/
   override public function select(obj:Object):Void{
        wrappedSingleSelectionModel.select(obj);
   }
 
    /**
      * Selects the first index.
    **/
   override public function selectFirst():Void{
        wrappedSingleSelectionModel.selectFirst();
   }
 
    /**
      * Selects the last index.
    **/
   override public function selectLast():Void{
        wrappedSingleSelectionModel.selectLast();
   }
 
    /**
      * Selects the next index.
    **/
   override public function selectNext():Void{
        wrappedSingleSelectionModel.selectNext();
   }
    
    /**
      * Selects the previous index.
    **/
   override public function selectPrevious():Void{
        wrappedSingleSelectionModel.selectPrevious();
   }      
}