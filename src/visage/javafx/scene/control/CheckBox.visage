/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene.control;
/** 
 * <p> A tri-state selection Control typically skinned as a box with a checkmark or tick mark when checked. </p>
 * 
 * @author Shiv Kumar Ganesh <gshiv.sk@gmail.com>
 */


public class CheckBox extends ButtonBase {
    override def wrappedNode = javafx.scene.control.CheckBox {}
    public-read def wrappedCheckBox = bind wrappedNode as javafx.scene.control.CheckBox;
    
    
    /**
     * <p>Determines whether the user toggling the CheckBox should cycle through all three states: checked, unchecked, and undefined.</p>
     **/ 
    public var allowIndeterminate:Boolean on replace oldValue{
        if(isInitialized(this) or not oldValue){
            wrappedCheckBox.setAllowIndeterminate(allowIndeterminate);
        }
    }
    
    /**
     * <p>Determines whether the CheckBox is in the indeterminate state.</p>
     **/ 
    public var indeterminate:Boolean on replace oldValue{
        if(isInitialized(this) or not oldValue){
            wrappedCheckBox.setIndeterminate(indeterminate);
        }
    }    
    
    /**
     * <p>Indicates whether this CheckBox is checked.</p>
     **/ 
 public var selected:Boolean on replace oldValue{
        if(isInitialized(this) or not oldValue){
            wrappedCheckBox.setSelected(selected);
        }
    }

    /**
     * <p>Toggles the state of the CheckBox.</p>
     **/ 
 public function fire():Void{
        wrappedCheckBox.fire();
    }
}

