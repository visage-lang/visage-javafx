/*
 * Copyright (c) 2010-2012, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package visage.javafx.scene;

import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.scene.input.MouseEvent;

import visage.javafx.scene.paint.Paint;

/**
 * @author Stephen Chin <steveonjava@gmail.com>
 * @author Alain BÃ©arez <A@cua.li>
 */
public class Scene {
    public-read var wrappedScene:javafx.scene.Scene;
    public function construct() {
        if (wrappedScene == null) {
            def root = if (content != null) content.wrappedParent else new javafx.scene.Group;
            wrappedScene = new javafx.scene.Scene(root, width, height, Paint.toJavaFX(fill));
        }
    }
    public-init var width :Double;
    public-init var height :Double;
    public default var content :Parent;
    public var fill:Color on replace {
        if (isInitialized(this) or fill != null) {
            wrappedScene.setFill(Paint.toJavaFX(fill));
        }
    }
    /**
     * Defines a function to be called when a mouse button has been clicked (pressed and released) on this <code>Scene</code>.
     */        
    public var onMouseClicked :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseClicked == null) { 
                wrappedScene.setOnMouseClicked(null) 
            } else if (wrappedScene.getOnMouseClicked() == null) { 
                wrappedScene.setOnMouseClicked(EventHandler { 
                    override function handle(e :Event) :Void { 
                        onMouseClicked(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }
    /**
     * Defines a function to be called when a mouse button is pressed on this <code>Scene</code> and then dragged.
     */        
    public var onMouseDragged :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseDragged == null) { 
                wrappedScene.setOnMouseDragged(null) 
            } else if (wrappedScene.getOnMouseDragged() == null) { 
                wrappedScene.setOnMouseDragged(EventHandler { 
                    override function handle(e :Event):Void { 
                        onMouseDragged(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }    
    /**
     * Defines a function to be called when the mouse enters this <code>Scene</code>.
     */        
    public var onMouseEntered :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseEntered == null) { 
                wrappedScene.setOnMouseEntered(null) 
            } else if (wrappedScene.getOnMouseEntered() == null) { 
                wrappedScene.setOnMouseEntered(EventHandler { 
                    override function handle(e :Event) :Void { 
                        onMouseEntered(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }   
   /**
     * Defines a function to be called when the mouse exits this <code>Scene</code>.
     */        
    public var onMouseExited :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseExited == null) { 
                wrappedScene.setOnMouseExited(null) 
            } else if (wrappedScene.getOnMouseExited() == null) { 
                wrappedScene.setOnMouseExited(EventHandler { 
                    override function handle(e :Event) :Void { 
                        onMouseExited(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }
   /**
     * Defines a function to be called when mouse cursor moves within this <code>Scene</code> but no buttons have been pushed.
     */        
    public var onMouseMoved :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseMoved == null) { 
                wrappedScene.setOnMouseMoved(null) 
            } else if (wrappedScene.getOnMouseMoved() == null) { 
                wrappedScene.setOnMouseMoved(EventHandler { 
                    override function handle(e :Event) :Void { 
                        onMouseMoved(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }
   /**
     * Defines a function to be called when a mouse button has been pressed on this <code>Scene</code>.
     */        
    public var onMousePressed :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMousePressed == null) { 
                wrappedScene.setOnMousePressed(null) 
            } else if (wrappedScene.getOnMousePressed() == null) { 
                wrappedScene.setOnMousePressed(EventHandler { 
                    override function handle(e :Event) :Void { 
                        onMousePressed(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }
   /**
     * Defines a function to be called when a mouse button has been released on this <code>Scene</code>.
     */        
    public var onMouseReleased :function(:MouseEvent):Void on replace { 
        // if (isInitialized(this)) { 
            if (onMouseReleased == null) { 
                wrappedScene.setOnMouseReleased(null) 
            } else if (wrappedScene.getOnMouseReleased() == null) { 
                wrappedScene.setOnMouseReleased(EventHandler { 
                    override function handle(e :Event) :Void { 
                        onMouseReleased(e as MouseEvent) 
                    }
                }) 
            } 
        // } 
    }
    
    /**
      *  Stylesheets used in this scene's contents
    */
    public var stylesheets:String[] on replace {
        if (isInitialized(this) or stylesheets != []) {
            wrappedScene.getStylesheets().setAll(for (stylesheet in stylesheets) stylesheet);
        }
    }    
}
